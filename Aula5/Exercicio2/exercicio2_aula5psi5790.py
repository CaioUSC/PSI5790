# -*- coding: utf-8 -*-
"""Exercicio2_Aula5PSI5790.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QmkzzjIMwj5iohTagz4wldsQhYypu6Df
"""

import numpy as np
import sys
import tensorflow.keras as keras
import matplotlib.pyplot as plt
from keras.datasets import fashion_mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Normalization, Input
from tensorflow.keras import optimizers

(AX,AY), (QX,QY) = fashion_mnist.load_data()

# fazer uma analise exploratoria dos dados
categorias=["Camiseta", "Calça", "Pulôver", "Vestido", "Casaco", "Sandália", "Camisa", "Tênis", "Bolsa", "Botins"]
print(AX.shape)
print(QX.shape)
print(AY.shape)
print(QY.shape)

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(AX[i], cmap=plt.cm.binary)
    plt.title(categorias[AY[i]])
plt.show()

# transforma as labels para caracteristicas categoricas
nclasses = 10
AY2 = keras.utils.to_categorical(AY, nclasses)
QY2 = keras.utils.to_categorical(QY, nclasses)
nl, nc = AX.shape[1], AX.shape[2]

# Cria a rede neural
model = Sequential(); model.add(Input(shape=(nl,nc)))
model.add(Normalization()) #Normaliza
model.add(Flatten())
model.add(Dense(400, activation='gelu'))
model.add(Dense(100, activation='gelu'))
model.add(Dense(nclasses, activation='softmax'))

opt=optimizers.Adam(learning_rate=0.001)
model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])
model.get_layer(index=0).adapt(AX)
model.fit(AX,AY2, batch_size=128, epochs=60, validation_data=(QX,QY2))

score = model.evaluate(QX, QY2, verbose=0)
print('Test loss: %.4f'%(score[0]))
print('Test accuracy: %.2f %%'%(100*score[1]))
print('Test error: %.2f %%'%(100*(1-score[1])))
QP2 = model.predict(QX)
QPC = np.argmax(QP2, axis=1)
model.save('mlp2.keras')

plt.figure(figsize=(10,10))
for i in range(20):
    plt.subplot(4,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(QX[i], cmap=plt.cm.binary)
    plt.text(0,-4,"QY: " + categorias[QY[i]], color='blue')
    plt.text(0,-1,"QP: " + categorias[QPC[i]], color='red')
plt.show()